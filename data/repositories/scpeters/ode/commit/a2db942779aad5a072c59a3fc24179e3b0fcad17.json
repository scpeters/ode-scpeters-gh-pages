{"rendered": {"message": {"raw": "apply the following fix, according to the instructions:\n\n-------------------------------------\nHi,\n\nModifications to enable AABBs on trimeshes:\n\ncollision_trimesh_internal.h: add to struct dxTriMeshData:\n    /* aabb in model space */\n    dVector3 AABBCenter;\n    dVector3 AABBExtents;\n\ncollision_trimesh.cpp: add at end of dxTriMeshData::Build:\n    // compute model space AABB\n    dVector3 AABBMax, AABBMin;\n    AABBMax[0] = AABBMax[1] = AABBMax[2] = -dInfinity;\n    AABBMin[0] = AABBMin[1] = AABBMin[2] = dInfinity;\n    if( Single ) {\n        const char* verts = (const char*)Vertices;\n        for( int i = 0; i < VertexCount; ++i ) {\n            const float* v = (const float*)verts;\n            if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n            if( v[1] > AABBMax[1] ) AABBMax[1] = v[1];\n            if( v[2] > AABBMax[2] ) AABBMax[2] = v[2];\n            if( v[0] < AABBMin[0] ) AABBMin[0] = v[0];\n            if( v[1] < AABBMin[1] ) AABBMin[1] = v[1];\n            if( v[2] < AABBMin[2] ) AABBMin[2] = v[2];\n            verts += VertexStide;\n        }\n    } else {\n        const char* verts = (const char*)Vertices;\n        for( int i = 0; i < VertexCount; ++i ) {\n            const double* v = (const double*)verts;\n            if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n            if( v[1] > AABBMax[1] ) AABBMax[1] = v[1];\n            if( v[2] > AABBMax[2] ) AABBMax[2] = v[2];\n            if( v[0] < AABBMin[0] ) AABBMin[0] = v[0];\n            if( v[1] < AABBMin[1] ) AABBMin[1] = v[1];\n            if( v[2] < AABBMin[2] ) AABBMin[2] = v[2];\n            verts += VertexStide;\n        }\n    }\n    AABBCenter[0] = (AABBMin[0] + AABBMax[0]) * REAL(0.5);\n    AABBCenter[1] = (AABBMin[1] + AABBMax[1]) * REAL(0.5);\n    AABBCenter[2] = (AABBMin[2] + AABBMax[2]) * REAL(0.5);\n    AABBExtents[0] = AABBMax[0] - AABBCenter[0];\n    AABBExtents[1] = AABBMax[1] - AABBCenter[1];\n    AABBExtents[2] = AABBMax[2] - AABBCenter[2];\n\ncollision_trimesh.cpp: change dxTriMesh::computeAABB() to:\n    void dxTriMesh::computeAABB() {\n        const dxTriMeshData* d = Data;\n        dVector3 c;\n        dMULTIPLY0_331( c, R, d->AABBCenter );\n        dReal xrange = dFabs(R[0] * Data->AABBExtents[0]) +\n                dFabs(R[1] * Data->AABBExtents[1]) + dFabs(R[2] *\nData->AABBExtents[2]);\n        dReal yrange = dFabs(R[4] * Data->AABBExtents[0]) +\n                dFabs(R[5] * Data->AABBExtents[1]) + dFabs(R[6] *\nData->AABBExtents[2]);\n        dReal zrange = dFabs(R[8] * Data->AABBExtents[0]) +\n                dFabs(R[9] * Data->AABBExtents[1]) + dFabs(R[10] *\nData->AABBExtents[2]);\n        aabb[0] = c[0] + pos[0] - xrange;\n        aabb[1] = c[0] + pos[0] + xrange;\n        aabb[2] = c[1] + pos[1] - yrange;\n        aabb[3] = c[1] + pos[1] + yrange;\n        aabb[4] = c[2] + pos[2] - zrange;\n        aabb[5] = c[2] + pos[2] + zrange;\n    }\n\n\nAras Pranckevicius aka NeARAZ\nhttp://www.gim.ktu.lt/nesnausk/nearaz/", "markup": "markdown", "html": "<p>apply the following fix, according to the instructions:</p>\n<hr />\n<p>Hi,</p>\n<p>Modifications to enable AABBs on trimeshes:</p>\n<p>collision_trimesh_internal.h: add to struct dxTriMeshData:<br />\n    /<em> aabb in model space </em>/<br />\n    dVector3 AABBCenter;<br />\n    dVector3 AABBExtents;</p>\n<p>collision_trimesh.cpp: add at end of dxTriMeshData::Build:<br />\n    // compute model space AABB<br />\n    dVector3 AABBMax, AABBMin;<br />\n    AABBMax[0] = AABBMax[1] = AABBMax[2] = -dInfinity;<br />\n    AABBMin[0] = AABBMin[1] = AABBMin[2] = dInfinity;<br />\n    if( Single ) {<br />\n        const char<em> verts = (const char</em>)Vertices;<br />\n        for( int i = 0; i &lt; VertexCount; ++i ) {<br />\n            const float<em> v = (const float</em>)verts;<br />\n            if( v[0] &gt; AABBMax[0] ) AABBMax[0] = v[0];<br />\n            if( v[1] &gt; AABBMax[1] ) AABBMax[1] = v[1];<br />\n            if( v[2] &gt; AABBMax[2] ) AABBMax[2] = v[2];<br />\n            if( v[0] &lt; AABBMin[0] ) AABBMin[0] = v[0];<br />\n            if( v[1] &lt; AABBMin[1] ) AABBMin[1] = v[1];<br />\n            if( v[2] &lt; AABBMin[2] ) AABBMin[2] = v[2];<br />\n            verts += VertexStide;<br />\n        }<br />\n    } else {<br />\n        const char<em> verts = (const char</em>)Vertices;<br />\n        for( int i = 0; i &lt; VertexCount; ++i ) {<br />\n            const double<em> v = (const double</em>)verts;<br />\n            if( v[0] &gt; AABBMax[0] ) AABBMax[0] = v[0];<br />\n            if( v[1] &gt; AABBMax[1] ) AABBMax[1] = v[1];<br />\n            if( v[2] &gt; AABBMax[2] ) AABBMax[2] = v[2];<br />\n            if( v[0] &lt; AABBMin[0] ) AABBMin[0] = v[0];<br />\n            if( v[1] &lt; AABBMin[1] ) AABBMin[1] = v[1];<br />\n            if( v[2] &lt; AABBMin[2] ) AABBMin[2] = v[2];<br />\n            verts += VertexStide;<br />\n        }<br />\n    }<br />\n    AABBCenter[0] = (AABBMin[0] + AABBMax[0]) * REAL(0.5);<br />\n    AABBCenter[1] = (AABBMin[1] + AABBMax[1]) * REAL(0.5);<br />\n    AABBCenter[2] = (AABBMin[2] + AABBMax[2]) * REAL(0.5);<br />\n    AABBExtents[0] = AABBMax[0] - AABBCenter[0];<br />\n    AABBExtents[1] = AABBMax[1] - AABBCenter[1];<br />\n    AABBExtents[2] = AABBMax[2] - AABBCenter[2];</p>\n<p>collision_trimesh.cpp: change dxTriMesh::computeAABB() to:<br />\n    void dxTriMesh::computeAABB() {<br />\n        const dxTriMeshData<em> d = Data;<br />\n        dVector3 c;<br />\n        dMULTIPLY0_331( c, R, d-&gt;AABBCenter );<br />\n        dReal xrange = dFabs(R[0] * Data-&gt;AABBExtents[0]) +<br />\n                dFabs(R[1] * Data-&gt;AABBExtents[1]) + dFabs(R[2] </em><br />\nData-&gt;AABBExtents[2]);<br />\n        dReal yrange = dFabs(R[4] * Data-&gt;AABBExtents[0]) +<br />\n                dFabs(R[5] * Data-&gt;AABBExtents[1]) + dFabs(R[6] <em><br />\nData-&gt;AABBExtents[2]);<br />\n        dReal zrange = dFabs(R[8] * Data-&gt;AABBExtents[0]) +<br />\n                dFabs(R[9] * Data-&gt;AABBExtents[1]) + dFabs(R[10] </em><br />\nData-&gt;AABBExtents[2]);<br />\n        aabb[0] = c[0] + pos[0] - xrange;<br />\n        aabb[1] = c[0] + pos[0] + xrange;<br />\n        aabb[2] = c[1] + pos[1] - yrange;<br />\n        aabb[3] = c[1] + pos[1] + yrange;<br />\n        aabb[4] = c[2] + pos[2] - zrange;<br />\n        aabb[5] = c[2] + pos[2] + zrange;<br />\n    }</p>\n<p>Aras Pranckevicius aka NeARAZ<br />\n<a href=\"http://www.gim.ktu.lt/nesnausk/nearaz/\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.gim.ktu.lt/nesnausk/nearaz/</a></p>", "type": "rendered"}}, "hash": "a2db942779aad5a072c59a3fc24179e3b0fcad17", "repository": {"links": {"self": {"href": "data/repositories/scpeters/ode.json"}, "html": {"href": "#!/scpeters/ode"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fa646312-54cc-4063-8d95-218397b3f80c}ts=c_plus_plus"}}, "type": "repository", "name": "ODE", "full_name": "scpeters/ode", "uuid": "{fa646312-54cc-4063-8d95-218397b3f80c}"}, "links": {"self": {"href": "data/repositories/scpeters/ode/commit/a2db942779aad5a072c59a3fc24179e3b0fcad17.json"}, "comments": {"href": "data/repositories/scpeters/ode/commit/a2db942779aad5a072c59a3fc24179e3b0fcad17/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/patch/a2db942779aad5a072c59a3fc24179e3b0fcad17"}, "html": {"href": "#!/scpeters/ode/commits/a2db942779aad5a072c59a3fc24179e3b0fcad17"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/diff/a2db942779aad5a072c59a3fc24179e3b0fcad17"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/commit/a2db942779aad5a072c59a3fc24179e3b0fcad17/approve"}, "statuses": {"href": "data/repositories/scpeters/ode/commit/a2db942779aad5a072c59a3fc24179e3b0fcad17/statuses_page=1.json"}}, "author": {"raw": "Adam D. Moss", "type": "author"}, "summary": {"raw": "apply the following fix, according to the instructions:\n\n-------------------------------------\nHi,\n\nModifications to enable AABBs on trimeshes:\n\ncollision_trimesh_internal.h: add to struct dxTriMeshData:\n    /* aabb in model space */\n    dVector3 AABBCenter;\n    dVector3 AABBExtents;\n\ncollision_trimesh.cpp: add at end of dxTriMeshData::Build:\n    // compute model space AABB\n    dVector3 AABBMax, AABBMin;\n    AABBMax[0] = AABBMax[1] = AABBMax[2] = -dInfinity;\n    AABBMin[0] = AABBMin[1] = AABBMin[2] = dInfinity;\n    if( Single ) {\n        const char* verts = (const char*)Vertices;\n        for( int i = 0; i < VertexCount; ++i ) {\n            const float* v = (const float*)verts;\n            if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n            if( v[1] > AABBMax[1] ) AABBMax[1] = v[1];\n            if( v[2] > AABBMax[2] ) AABBMax[2] = v[2];\n            if( v[0] < AABBMin[0] ) AABBMin[0] = v[0];\n            if( v[1] < AABBMin[1] ) AABBMin[1] = v[1];\n            if( v[2] < AABBMin[2] ) AABBMin[2] = v[2];\n            verts += VertexStide;\n        }\n    } else {\n        const char* verts = (const char*)Vertices;\n        for( int i = 0; i < VertexCount; ++i ) {\n            const double* v = (const double*)verts;\n            if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n            if( v[1] > AABBMax[1] ) AABBMax[1] = v[1];\n            if( v[2] > AABBMax[2] ) AABBMax[2] = v[2];\n            if( v[0] < AABBMin[0] ) AABBMin[0] = v[0];\n            if( v[1] < AABBMin[1] ) AABBMin[1] = v[1];\n            if( v[2] < AABBMin[2] ) AABBMin[2] = v[2];\n            verts += VertexStide;\n        }\n    }\n    AABBCenter[0] = (AABBMin[0] + AABBMax[0]) * REAL(0.5);\n    AABBCenter[1] = (AABBMin[1] + AABBMax[1]) * REAL(0.5);\n    AABBCenter[2] = (AABBMin[2] + AABBMax[2]) * REAL(0.5);\n    AABBExtents[0] = AABBMax[0] - AABBCenter[0];\n    AABBExtents[1] = AABBMax[1] - AABBCenter[1];\n    AABBExtents[2] = AABBMax[2] - AABBCenter[2];\n\ncollision_trimesh.cpp: change dxTriMesh::computeAABB() to:\n    void dxTriMesh::computeAABB() {\n        const dxTriMeshData* d = Data;\n        dVector3 c;\n        dMULTIPLY0_331( c, R, d->AABBCenter );\n        dReal xrange = dFabs(R[0] * Data->AABBExtents[0]) +\n                dFabs(R[1] * Data->AABBExtents[1]) + dFabs(R[2] *\nData->AABBExtents[2]);\n        dReal yrange = dFabs(R[4] * Data->AABBExtents[0]) +\n                dFabs(R[5] * Data->AABBExtents[1]) + dFabs(R[6] *\nData->AABBExtents[2]);\n        dReal zrange = dFabs(R[8] * Data->AABBExtents[0]) +\n                dFabs(R[9] * Data->AABBExtents[1]) + dFabs(R[10] *\nData->AABBExtents[2]);\n        aabb[0] = c[0] + pos[0] - xrange;\n        aabb[1] = c[0] + pos[0] + xrange;\n        aabb[2] = c[1] + pos[1] - yrange;\n        aabb[3] = c[1] + pos[1] + yrange;\n        aabb[4] = c[2] + pos[2] - zrange;\n        aabb[5] = c[2] + pos[2] + zrange;\n    }\n\n\nAras Pranckevicius aka NeARAZ\nhttp://www.gim.ktu.lt/nesnausk/nearaz/", "markup": "markdown", "html": "<p>apply the following fix, according to the instructions:</p>\n<hr />\n<p>Hi,</p>\n<p>Modifications to enable AABBs on trimeshes:</p>\n<p>collision_trimesh_internal.h: add to struct dxTriMeshData:<br />\n    /<em> aabb in model space </em>/<br />\n    dVector3 AABBCenter;<br />\n    dVector3 AABBExtents;</p>\n<p>collision_trimesh.cpp: add at end of dxTriMeshData::Build:<br />\n    // compute model space AABB<br />\n    dVector3 AABBMax, AABBMin;<br />\n    AABBMax[0] = AABBMax[1] = AABBMax[2] = -dInfinity;<br />\n    AABBMin[0] = AABBMin[1] = AABBMin[2] = dInfinity;<br />\n    if( Single ) {<br />\n        const char<em> verts = (const char</em>)Vertices;<br />\n        for( int i = 0; i &lt; VertexCount; ++i ) {<br />\n            const float<em> v = (const float</em>)verts;<br />\n            if( v[0] &gt; AABBMax[0] ) AABBMax[0] = v[0];<br />\n            if( v[1] &gt; AABBMax[1] ) AABBMax[1] = v[1];<br />\n            if( v[2] &gt; AABBMax[2] ) AABBMax[2] = v[2];<br />\n            if( v[0] &lt; AABBMin[0] ) AABBMin[0] = v[0];<br />\n            if( v[1] &lt; AABBMin[1] ) AABBMin[1] = v[1];<br />\n            if( v[2] &lt; AABBMin[2] ) AABBMin[2] = v[2];<br />\n            verts += VertexStide;<br />\n        }<br />\n    } else {<br />\n        const char<em> verts = (const char</em>)Vertices;<br />\n        for( int i = 0; i &lt; VertexCount; ++i ) {<br />\n            const double<em> v = (const double</em>)verts;<br />\n            if( v[0] &gt; AABBMax[0] ) AABBMax[0] = v[0];<br />\n            if( v[1] &gt; AABBMax[1] ) AABBMax[1] = v[1];<br />\n            if( v[2] &gt; AABBMax[2] ) AABBMax[2] = v[2];<br />\n            if( v[0] &lt; AABBMin[0] ) AABBMin[0] = v[0];<br />\n            if( v[1] &lt; AABBMin[1] ) AABBMin[1] = v[1];<br />\n            if( v[2] &lt; AABBMin[2] ) AABBMin[2] = v[2];<br />\n            verts += VertexStide;<br />\n        }<br />\n    }<br />\n    AABBCenter[0] = (AABBMin[0] + AABBMax[0]) * REAL(0.5);<br />\n    AABBCenter[1] = (AABBMin[1] + AABBMax[1]) * REAL(0.5);<br />\n    AABBCenter[2] = (AABBMin[2] + AABBMax[2]) * REAL(0.5);<br />\n    AABBExtents[0] = AABBMax[0] - AABBCenter[0];<br />\n    AABBExtents[1] = AABBMax[1] - AABBCenter[1];<br />\n    AABBExtents[2] = AABBMax[2] - AABBCenter[2];</p>\n<p>collision_trimesh.cpp: change dxTriMesh::computeAABB() to:<br />\n    void dxTriMesh::computeAABB() {<br />\n        const dxTriMeshData<em> d = Data;<br />\n        dVector3 c;<br />\n        dMULTIPLY0_331( c, R, d-&gt;AABBCenter );<br />\n        dReal xrange = dFabs(R[0] * Data-&gt;AABBExtents[0]) +<br />\n                dFabs(R[1] * Data-&gt;AABBExtents[1]) + dFabs(R[2] </em><br />\nData-&gt;AABBExtents[2]);<br />\n        dReal yrange = dFabs(R[4] * Data-&gt;AABBExtents[0]) +<br />\n                dFabs(R[5] * Data-&gt;AABBExtents[1]) + dFabs(R[6] <em><br />\nData-&gt;AABBExtents[2]);<br />\n        dReal zrange = dFabs(R[8] * Data-&gt;AABBExtents[0]) +<br />\n                dFabs(R[9] * Data-&gt;AABBExtents[1]) + dFabs(R[10] </em><br />\nData-&gt;AABBExtents[2]);<br />\n        aabb[0] = c[0] + pos[0] - xrange;<br />\n        aabb[1] = c[0] + pos[0] + xrange;<br />\n        aabb[2] = c[1] + pos[1] - yrange;<br />\n        aabb[3] = c[1] + pos[1] + yrange;<br />\n        aabb[4] = c[2] + pos[2] - zrange;<br />\n        aabb[5] = c[2] + pos[2] + zrange;<br />\n    }</p>\n<p>Aras Pranckevicius aka NeARAZ<br />\n<a href=\"http://www.gim.ktu.lt/nesnausk/nearaz/\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.gim.ktu.lt/nesnausk/nearaz/</a></p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "129dd7a55c518285965c95b992436cb21668d9cb", "type": "commit", "links": {"self": {"href": "data/repositories/scpeters/ode/commit/129dd7a55c518285965c95b992436cb21668d9cb.json"}, "html": {"href": "#!/scpeters/ode/commits/129dd7a55c518285965c95b992436cb21668d9cb"}}}], "date": "2003-11-14T19:40:10+00:00", "message": "apply the following fix, according to the instructions:\n\n-------------------------------------\nHi,\n\nModifications to enable AABBs on trimeshes:\n\ncollision_trimesh_internal.h: add to struct dxTriMeshData:\n    /* aabb in model space */\n    dVector3 AABBCenter;\n    dVector3 AABBExtents;\n\ncollision_trimesh.cpp: add at end of dxTriMeshData::Build:\n    // compute model space AABB\n    dVector3 AABBMax, AABBMin;\n    AABBMax[0] = AABBMax[1] = AABBMax[2] = -dInfinity;\n    AABBMin[0] = AABBMin[1] = AABBMin[2] = dInfinity;\n    if( Single ) {\n        const char* verts = (const char*)Vertices;\n        for( int i = 0; i < VertexCount; ++i ) {\n            const float* v = (const float*)verts;\n            if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n            if( v[1] > AABBMax[1] ) AABBMax[1] = v[1];\n            if( v[2] > AABBMax[2] ) AABBMax[2] = v[2];\n            if( v[0] < AABBMin[0] ) AABBMin[0] = v[0];\n            if( v[1] < AABBMin[1] ) AABBMin[1] = v[1];\n            if( v[2] < AABBMin[2] ) AABBMin[2] = v[2];\n            verts += VertexStide;\n        }\n    } else {\n        const char* verts = (const char*)Vertices;\n        for( int i = 0; i < VertexCount; ++i ) {\n            const double* v = (const double*)verts;\n            if( v[0] > AABBMax[0] ) AABBMax[0] = v[0];\n            if( v[1] > AABBMax[1] ) AABBMax[1] = v[1];\n            if( v[2] > AABBMax[2] ) AABBMax[2] = v[2];\n            if( v[0] < AABBMin[0] ) AABBMin[0] = v[0];\n            if( v[1] < AABBMin[1] ) AABBMin[1] = v[1];\n            if( v[2] < AABBMin[2] ) AABBMin[2] = v[2];\n            verts += VertexStide;\n        }\n    }\n    AABBCenter[0] = (AABBMin[0] + AABBMax[0]) * REAL(0.5);\n    AABBCenter[1] = (AABBMin[1] + AABBMax[1]) * REAL(0.5);\n    AABBCenter[2] = (AABBMin[2] + AABBMax[2]) * REAL(0.5);\n    AABBExtents[0] = AABBMax[0] - AABBCenter[0];\n    AABBExtents[1] = AABBMax[1] - AABBCenter[1];\n    AABBExtents[2] = AABBMax[2] - AABBCenter[2];\n\ncollision_trimesh.cpp: change dxTriMesh::computeAABB() to:\n    void dxTriMesh::computeAABB() {\n        const dxTriMeshData* d = Data;\n        dVector3 c;\n        dMULTIPLY0_331( c, R, d->AABBCenter );\n        dReal xrange = dFabs(R[0] * Data->AABBExtents[0]) +\n                dFabs(R[1] * Data->AABBExtents[1]) + dFabs(R[2] *\nData->AABBExtents[2]);\n        dReal yrange = dFabs(R[4] * Data->AABBExtents[0]) +\n                dFabs(R[5] * Data->AABBExtents[1]) + dFabs(R[6] *\nData->AABBExtents[2]);\n        dReal zrange = dFabs(R[8] * Data->AABBExtents[0]) +\n                dFabs(R[9] * Data->AABBExtents[1]) + dFabs(R[10] *\nData->AABBExtents[2]);\n        aabb[0] = c[0] + pos[0] - xrange;\n        aabb[1] = c[0] + pos[0] + xrange;\n        aabb[2] = c[1] + pos[1] - yrange;\n        aabb[3] = c[1] + pos[1] + yrange;\n        aabb[4] = c[2] + pos[2] - zrange;\n        aabb[5] = c[2] + pos[2] + zrange;\n    }\n\n\nAras Pranckevicius aka NeARAZ\nhttp://www.gim.ktu.lt/nesnausk/nearaz/", "type": "commit", "git_hash": "66263916412538323c0cda2c15240ceeb52c6202", "tags": null, "branches": "ode"}