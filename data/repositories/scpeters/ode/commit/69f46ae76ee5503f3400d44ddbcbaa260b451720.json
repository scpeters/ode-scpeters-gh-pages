{"rendered": {"message": {"raw": "modified tri-vs-sphere fix from O'dell Hicks:\n---------------------------------------------------\n\nThe problem is with double-sided trimeshes.  Contacts produced may cause the\nsphere to get stuck or pushed through to the other side.  I haven't tested\nit, but I guess the problem would also arise at certain velocities/updates\nfor close triangles with opposite winding orders that aren't necessarily\ncoplanar (eg, adjacent buildings with little space between them).\n\nI was about to start looking at Tokamak due to this problem (this\nfuncitonality is important in my current project), but the fix turned out to\nbe easier than switching physics engines : )\n\nThis is probably pointless, as it sounds like Croteam's collider may be used\nin the near future, but here it is for anyone interested:\n\nIn collision_trimesh_sphere.cpp, at the beginning of the function\nGetContactData, add this code:\n\n//calculate plane of triangle\n\n dVector4 Plane;\n dCROSS(Plane, =, Edge0, Edge1);\n Plane[3] = dDOT(Plane, Origin);\n\n //normalize\n float magnitude = 1.0f / dSqrt(dDOT(Plane, Plane));\n Plane[0] *= magnitude;\n Plane[1] *= magnitude;\n Plane[2] *= magnitude;\n Plane[3] *= magnitude;\n\n/*If the center of the sphere is within the positive halfspace of the\ntriangle's plane, allow a contact to be generated.\nIf the center of the sphere made it into the positive halfspace of a\nback-facing triangle, then the physics update and/or velocity needs\n to be adjusted (penetration has occured anyway).\n*/\n\n float side = dDOT(Plane,Center) - Plane[3];\n\n if(side < 0.0f)\n  return false;", "markup": "markdown", "html": "<h2 id=\"markdown-header-modified-tri-vs-sphere-fix-from-odell-hicks\">modified tri-vs-sphere fix from O'dell Hicks:</h2>\n<p>The problem is with double-sided trimeshes.  Contacts produced may cause the<br />\nsphere to get stuck or pushed through to the other side.  I haven't tested<br />\nit, but I guess the problem would also arise at certain velocities/updates<br />\nfor close triangles with opposite winding orders that aren't necessarily<br />\ncoplanar (eg, adjacent buildings with little space between them).</p>\n<p>I was about to start looking at Tokamak due to this problem (this<br />\nfuncitonality is important in my current project), but the fix turned out to<br />\nbe easier than switching physics engines : )</p>\n<p>This is probably pointless, as it sounds like Croteam's collider may be used<br />\nin the near future, but here it is for anyone interested:</p>\n<p>In collision_trimesh_sphere.cpp, at the beginning of the function<br />\nGetContactData, add this code:</p>\n<p>//calculate plane of triangle</p>\n<p>dVector4 Plane;<br />\n dCROSS(Plane, =, Edge0, Edge1);<br />\n Plane[3] = dDOT(Plane, Origin);</p>\n<p>//normalize<br />\n float magnitude = 1.0f / dSqrt(dDOT(Plane, Plane));<br />\n Plane[0] <em>= magnitude;<br />\n Plane[1] </em>= magnitude;<br />\n Plane[2] <em>= magnitude;<br />\n Plane[3] </em>= magnitude;</p>\n<p>/<em>If the center of the sphere is within the positive halfspace of the<br />\ntriangle's plane, allow a contact to be generated.<br />\nIf the center of the sphere made it into the positive halfspace of a<br />\nback-facing triangle, then the physics update and/or velocity needs<br />\n to be adjusted (penetration has occured anyway).</em>/</p>\n<p>float side = dDOT(Plane,Center) - Plane[3];</p>\n<p>if(side &lt; 0.0f)<br />\n  return false;</p>", "type": "rendered"}}, "hash": "69f46ae76ee5503f3400d44ddbcbaa260b451720", "repository": {"links": {"self": {"href": "data/repositories/scpeters/ode.json"}, "html": {"href": "#!/scpeters/ode"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fa646312-54cc-4063-8d95-218397b3f80c}ts=c_plus_plus"}}, "type": "repository", "name": "ODE", "full_name": "scpeters/ode", "uuid": "{fa646312-54cc-4063-8d95-218397b3f80c}"}, "links": {"self": {"href": "data/repositories/scpeters/ode/commit/69f46ae76ee5503f3400d44ddbcbaa260b451720.json"}, "comments": {"href": "data/repositories/scpeters/ode/commit/69f46ae76ee5503f3400d44ddbcbaa260b451720/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/patch/69f46ae76ee5503f3400d44ddbcbaa260b451720"}, "html": {"href": "#!/scpeters/ode/commits/69f46ae76ee5503f3400d44ddbcbaa260b451720"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/diff/69f46ae76ee5503f3400d44ddbcbaa260b451720"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/commit/69f46ae76ee5503f3400d44ddbcbaa260b451720/approve"}, "statuses": {"href": "data/repositories/scpeters/ode/commit/69f46ae76ee5503f3400d44ddbcbaa260b451720/statuses_page=1.json"}}, "author": {"raw": "Adam D. Moss", "type": "author"}, "summary": {"raw": "modified tri-vs-sphere fix from O'dell Hicks:\n---------------------------------------------------\n\nThe problem is with double-sided trimeshes.  Contacts produced may cause the\nsphere to get stuck or pushed through to the other side.  I haven't tested\nit, but I guess the problem would also arise at certain velocities/updates\nfor close triangles with opposite winding orders that aren't necessarily\ncoplanar (eg, adjacent buildings with little space between them).\n\nI was about to start looking at Tokamak due to this problem (this\nfuncitonality is important in my current project), but the fix turned out to\nbe easier than switching physics engines : )\n\nThis is probably pointless, as it sounds like Croteam's collider may be used\nin the near future, but here it is for anyone interested:\n\nIn collision_trimesh_sphere.cpp, at the beginning of the function\nGetContactData, add this code:\n\n//calculate plane of triangle\n\n dVector4 Plane;\n dCROSS(Plane, =, Edge0, Edge1);\n Plane[3] = dDOT(Plane, Origin);\n\n //normalize\n float magnitude = 1.0f / dSqrt(dDOT(Plane, Plane));\n Plane[0] *= magnitude;\n Plane[1] *= magnitude;\n Plane[2] *= magnitude;\n Plane[3] *= magnitude;\n\n/*If the center of the sphere is within the positive halfspace of the\ntriangle's plane, allow a contact to be generated.\nIf the center of the sphere made it into the positive halfspace of a\nback-facing triangle, then the physics update and/or velocity needs\n to be adjusted (penetration has occured anyway).\n*/\n\n float side = dDOT(Plane,Center) - Plane[3];\n\n if(side < 0.0f)\n  return false;", "markup": "markdown", "html": "<h2 id=\"markdown-header-modified-tri-vs-sphere-fix-from-odell-hicks\">modified tri-vs-sphere fix from O'dell Hicks:</h2>\n<p>The problem is with double-sided trimeshes.  Contacts produced may cause the<br />\nsphere to get stuck or pushed through to the other side.  I haven't tested<br />\nit, but I guess the problem would also arise at certain velocities/updates<br />\nfor close triangles with opposite winding orders that aren't necessarily<br />\ncoplanar (eg, adjacent buildings with little space between them).</p>\n<p>I was about to start looking at Tokamak due to this problem (this<br />\nfuncitonality is important in my current project), but the fix turned out to<br />\nbe easier than switching physics engines : )</p>\n<p>This is probably pointless, as it sounds like Croteam's collider may be used<br />\nin the near future, but here it is for anyone interested:</p>\n<p>In collision_trimesh_sphere.cpp, at the beginning of the function<br />\nGetContactData, add this code:</p>\n<p>//calculate plane of triangle</p>\n<p>dVector4 Plane;<br />\n dCROSS(Plane, =, Edge0, Edge1);<br />\n Plane[3] = dDOT(Plane, Origin);</p>\n<p>//normalize<br />\n float magnitude = 1.0f / dSqrt(dDOT(Plane, Plane));<br />\n Plane[0] <em>= magnitude;<br />\n Plane[1] </em>= magnitude;<br />\n Plane[2] <em>= magnitude;<br />\n Plane[3] </em>= magnitude;</p>\n<p>/<em>If the center of the sphere is within the positive halfspace of the<br />\ntriangle's plane, allow a contact to be generated.<br />\nIf the center of the sphere made it into the positive halfspace of a<br />\nback-facing triangle, then the physics update and/or velocity needs<br />\n to be adjusted (penetration has occured anyway).</em>/</p>\n<p>float side = dDOT(Plane,Center) - Plane[3];</p>\n<p>if(side &lt; 0.0f)<br />\n  return false;</p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "b469d511623439e8d686e03b1dced8724ff17648", "type": "commit", "links": {"self": {"href": "data/repositories/scpeters/ode/commit/b469d511623439e8d686e03b1dced8724ff17648.json"}, "html": {"href": "#!/scpeters/ode/commits/b469d511623439e8d686e03b1dced8724ff17648"}}}], "date": "2004-04-09T08:00:55+00:00", "message": "modified tri-vs-sphere fix from O'dell Hicks:\n---------------------------------------------------\n\nThe problem is with double-sided trimeshes.  Contacts produced may cause the\nsphere to get stuck or pushed through to the other side.  I haven't tested\nit, but I guess the problem would also arise at certain velocities/updates\nfor close triangles with opposite winding orders that aren't necessarily\ncoplanar (eg, adjacent buildings with little space between them).\n\nI was about to start looking at Tokamak due to this problem (this\nfuncitonality is important in my current project), but the fix turned out to\nbe easier than switching physics engines : )\n\nThis is probably pointless, as it sounds like Croteam's collider may be used\nin the near future, but here it is for anyone interested:\n\nIn collision_trimesh_sphere.cpp, at the beginning of the function\nGetContactData, add this code:\n\n//calculate plane of triangle\n\n dVector4 Plane;\n dCROSS(Plane, =, Edge0, Edge1);\n Plane[3] = dDOT(Plane, Origin);\n\n //normalize\n float magnitude = 1.0f / dSqrt(dDOT(Plane, Plane));\n Plane[0] *= magnitude;\n Plane[1] *= magnitude;\n Plane[2] *= magnitude;\n Plane[3] *= magnitude;\n\n/*If the center of the sphere is within the positive halfspace of the\ntriangle's plane, allow a contact to be generated.\nIf the center of the sphere made it into the positive halfspace of a\nback-facing triangle, then the physics update and/or velocity needs\n to be adjusted (penetration has occured anyway).\n*/\n\n float side = dDOT(Plane,Center) - Plane[3];\n\n if(side < 0.0f)\n  return false;", "type": "commit", "git_hash": "d3359adac0b7af5f19c5ee80741232870322e93a", "tags": null, "branches": "ode"}