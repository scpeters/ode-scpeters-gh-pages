{"rendered": {"message": {"raw": "apply the following fix, with a mildly descriptive comment:\n------------------\nHi,\n\nTriMesh for temporal coherence uses ODE's dArray of SphereTC and BoxTC\nclasses. These in turn are derived from OPCODE classes, and contain\nIceCore::Container that has a non-trivial destructor.\n\nNow, dxTriMesh::ClearTCCache uses dArray's setSize(0) to clear the caches -\nbut the destructor isn't called. So, each ClearTCCache leaks previous\ncaches' containers.\n\nA quick dirty fix is to call destructors by hand:\n\nvoid dxTriMesh::ClearTCCache(){\n    int i, n;\n    n = SphereTCCache.size();\n    for( i = 0; i < n; ++i ) {\n        SphereTCCache[i].~SphereTC();\n    }\n    SphereTCCache.setSize(0);\n    n = BoxTCCache.size();\n    for( i = 0; i < n; ++i ) {\n        BoxTCCache[i].~BoxTC();\n    }\n    BoxTCCache.setSize(0);\n}\n\n\nAras Pranckevicius aka NeARAZ\nhttp://www.gim.ktu.lt/nesnausk/nearaz/", "markup": "markdown", "html": "<h2 id=\"markdown-header-apply-the-following-fix-with-a-mildly-descriptive-comment\">apply the following fix, with a mildly descriptive comment:</h2>\n<p>Hi,</p>\n<p>TriMesh for temporal coherence uses ODE's dArray of SphereTC and BoxTC<br />\nclasses. These in turn are derived from OPCODE classes, and contain<br />\nIceCore::Container that has a non-trivial destructor.</p>\n<p>Now, dxTriMesh::ClearTCCache uses dArray's setSize(0) to clear the caches -<br />\nbut the destructor isn't called. So, each ClearTCCache leaks previous<br />\ncaches' containers.</p>\n<p>A quick dirty fix is to call destructors by hand:</p>\n<p>void dxTriMesh::ClearTCCache(){<br />\n    int i, n;<br />\n    n = SphereTCCache.size();<br />\n    for( i = 0; i &lt; n; ++i ) {<br />\n        SphereTCCache[i].~SphereTC();<br />\n    }<br />\n    SphereTCCache.setSize(0);<br />\n    n = BoxTCCache.size();<br />\n    for( i = 0; i &lt; n; ++i ) {<br />\n        BoxTCCache[i].~BoxTC();<br />\n    }<br />\n    BoxTCCache.setSize(0);<br />\n}</p>\n<p>Aras Pranckevicius aka NeARAZ<br />\n<a href=\"http://www.gim.ktu.lt/nesnausk/nearaz/\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.gim.ktu.lt/nesnausk/nearaz/</a></p>", "type": "rendered"}}, "hash": "129dd7a55c518285965c95b992436cb21668d9cb", "repository": {"links": {"self": {"href": "data/repositories/scpeters/ode.json"}, "html": {"href": "#!/scpeters/ode"}, "avatar": {"href": "data/bytebucket.org/ravatar/{fa646312-54cc-4063-8d95-218397b3f80c}ts=c_plus_plus"}}, "type": "repository", "name": "ODE", "full_name": "scpeters/ode", "uuid": "{fa646312-54cc-4063-8d95-218397b3f80c}"}, "links": {"self": {"href": "data/repositories/scpeters/ode/commit/129dd7a55c518285965c95b992436cb21668d9cb.json"}, "comments": {"href": "data/repositories/scpeters/ode/commit/129dd7a55c518285965c95b992436cb21668d9cb/comments_page=1.json"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/patch/129dd7a55c518285965c95b992436cb21668d9cb"}, "html": {"href": "#!/scpeters/ode/commits/129dd7a55c518285965c95b992436cb21668d9cb"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/diff/129dd7a55c518285965c95b992436cb21668d9cb"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/scpeters/ode/commit/129dd7a55c518285965c95b992436cb21668d9cb/approve"}, "statuses": {"href": "data/repositories/scpeters/ode/commit/129dd7a55c518285965c95b992436cb21668d9cb/statuses_page=1.json"}}, "author": {"raw": "Adam D. Moss", "type": "author"}, "summary": {"raw": "apply the following fix, with a mildly descriptive comment:\n------------------\nHi,\n\nTriMesh for temporal coherence uses ODE's dArray of SphereTC and BoxTC\nclasses. These in turn are derived from OPCODE classes, and contain\nIceCore::Container that has a non-trivial destructor.\n\nNow, dxTriMesh::ClearTCCache uses dArray's setSize(0) to clear the caches -\nbut the destructor isn't called. So, each ClearTCCache leaks previous\ncaches' containers.\n\nA quick dirty fix is to call destructors by hand:\n\nvoid dxTriMesh::ClearTCCache(){\n    int i, n;\n    n = SphereTCCache.size();\n    for( i = 0; i < n; ++i ) {\n        SphereTCCache[i].~SphereTC();\n    }\n    SphereTCCache.setSize(0);\n    n = BoxTCCache.size();\n    for( i = 0; i < n; ++i ) {\n        BoxTCCache[i].~BoxTC();\n    }\n    BoxTCCache.setSize(0);\n}\n\n\nAras Pranckevicius aka NeARAZ\nhttp://www.gim.ktu.lt/nesnausk/nearaz/", "markup": "markdown", "html": "<h2 id=\"markdown-header-apply-the-following-fix-with-a-mildly-descriptive-comment\">apply the following fix, with a mildly descriptive comment:</h2>\n<p>Hi,</p>\n<p>TriMesh for temporal coherence uses ODE's dArray of SphereTC and BoxTC<br />\nclasses. These in turn are derived from OPCODE classes, and contain<br />\nIceCore::Container that has a non-trivial destructor.</p>\n<p>Now, dxTriMesh::ClearTCCache uses dArray's setSize(0) to clear the caches -<br />\nbut the destructor isn't called. So, each ClearTCCache leaks previous<br />\ncaches' containers.</p>\n<p>A quick dirty fix is to call destructors by hand:</p>\n<p>void dxTriMesh::ClearTCCache(){<br />\n    int i, n;<br />\n    n = SphereTCCache.size();<br />\n    for( i = 0; i &lt; n; ++i ) {<br />\n        SphereTCCache[i].~SphereTC();<br />\n    }<br />\n    SphereTCCache.setSize(0);<br />\n    n = BoxTCCache.size();<br />\n    for( i = 0; i &lt; n; ++i ) {<br />\n        BoxTCCache[i].~BoxTC();<br />\n    }<br />\n    BoxTCCache.setSize(0);<br />\n}</p>\n<p>Aras Pranckevicius aka NeARAZ<br />\n<a href=\"http://www.gim.ktu.lt/nesnausk/nearaz/\" rel=\"nofollow\" class=\"ap-connect-link\">http://www.gim.ktu.lt/nesnausk/nearaz/</a></p>", "type": "rendered"}, "participants": [], "parents": [{"hash": "98c4e69dc50edc779d03b424164692a703105a93", "type": "commit", "links": {"self": {"href": "data/repositories/scpeters/ode/commit/98c4e69dc50edc779d03b424164692a703105a93.json"}, "html": {"href": "#!/scpeters/ode/commits/98c4e69dc50edc779d03b424164692a703105a93"}}}], "date": "2003-11-14T19:31:35+00:00", "message": "apply the following fix, with a mildly descriptive comment:\n------------------\nHi,\n\nTriMesh for temporal coherence uses ODE's dArray of SphereTC and BoxTC\nclasses. These in turn are derived from OPCODE classes, and contain\nIceCore::Container that has a non-trivial destructor.\n\nNow, dxTriMesh::ClearTCCache uses dArray's setSize(0) to clear the caches -\nbut the destructor isn't called. So, each ClearTCCache leaks previous\ncaches' containers.\n\nA quick dirty fix is to call destructors by hand:\n\nvoid dxTriMesh::ClearTCCache(){\n    int i, n;\n    n = SphereTCCache.size();\n    for( i = 0; i < n; ++i ) {\n        SphereTCCache[i].~SphereTC();\n    }\n    SphereTCCache.setSize(0);\n    n = BoxTCCache.size();\n    for( i = 0; i < n; ++i ) {\n        BoxTCCache[i].~BoxTC();\n    }\n    BoxTCCache.setSize(0);\n}\n\n\nAras Pranckevicius aka NeARAZ\nhttp://www.gim.ktu.lt/nesnausk/nearaz/", "type": "commit", "git_hash": "c3b8200f478cf6ac889d569d29f21bb01d08b6e4", "tags": null, "branches": "ode"}